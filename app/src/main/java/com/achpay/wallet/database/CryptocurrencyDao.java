package com.achpay.wallet.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.achpay.wallet.database.dbmodel.Cryptocurrency;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CRYPTOCURRENCY".
*/
public class CryptocurrencyDao extends AbstractDao<Cryptocurrency, String> {

    public static final String TABLENAME = "CRYPTOCURRENCY";

    /**
     * Properties of entity Cryptocurrency.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Coinunique = new Property(0, String.class, "coinunique", true, "COINUNIQUE");
        public final static Property CryptoCurrency = new Property(1, String.class, "cryptoCurrency", false, "CRYPTO_CURRENCY");
        public final static Property CryptoCurrencyDesc = new Property(2, String.class, "cryptoCurrencyDesc", false, "CRYPTO_CURRENCY_DESC");
        public final static Property ListlogoUrl = new Property(3, String.class, "listlogoUrl", false, "LISTLOGO_URL");
        public final static Property CryptoName = new Property(4, String.class, "cryptoName", false, "CRYPTO_NAME");
        public final static Property CryptoProtocol = new Property(5, String.class, "cryptoProtocol", false, "CRYPTO_PROTOCOL");
        public final static Property CryptoCoin = new Property(6, String.class, "cryptoCoin", false, "CRYPTO_COIN");
        public final static Property FullCoinName = new Property(7, String.class, "fullCoinName", false, "FULL_COIN_NAME");
        public final static Property CoinType = new Property(8, String.class, "coinType", false, "COIN_TYPE");
    }


    public CryptocurrencyDao(DaoConfig config) {
        super(config);
    }
    
    public CryptocurrencyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CRYPTOCURRENCY\" (" + //
                "\"COINUNIQUE\" TEXT PRIMARY KEY NOT NULL ," + // 0: coinunique
                "\"CRYPTO_CURRENCY\" TEXT," + // 1: cryptoCurrency
                "\"CRYPTO_CURRENCY_DESC\" TEXT," + // 2: cryptoCurrencyDesc
                "\"LISTLOGO_URL\" TEXT," + // 3: listlogoUrl
                "\"CRYPTO_NAME\" TEXT," + // 4: cryptoName
                "\"CRYPTO_PROTOCOL\" TEXT," + // 5: cryptoProtocol
                "\"CRYPTO_COIN\" TEXT," + // 6: cryptoCoin
                "\"FULL_COIN_NAME\" TEXT," + // 7: fullCoinName
                "\"COIN_TYPE\" TEXT);"); // 8: coinType
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CRYPTOCURRENCY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Cryptocurrency entity) {
        stmt.clearBindings();
 
        String coinunique = entity.getCoinunique();
        if (coinunique != null) {
            stmt.bindString(1, coinunique);
        }
 
        String cryptoCurrency = entity.getCryptoCurrency();
        if (cryptoCurrency != null) {
            stmt.bindString(2, cryptoCurrency);
        }
 
        String cryptoCurrencyDesc = entity.getCryptoCurrencyDesc();
        if (cryptoCurrencyDesc != null) {
            stmt.bindString(3, cryptoCurrencyDesc);
        }
 
        String listlogoUrl = entity.getListlogoUrl();
        if (listlogoUrl != null) {
            stmt.bindString(4, listlogoUrl);
        }
 
        String cryptoName = entity.getCryptoName();
        if (cryptoName != null) {
            stmt.bindString(5, cryptoName);
        }
 
        String cryptoProtocol = entity.getCryptoProtocol();
        if (cryptoProtocol != null) {
            stmt.bindString(6, cryptoProtocol);
        }
 
        String cryptoCoin = entity.getCryptoCoin();
        if (cryptoCoin != null) {
            stmt.bindString(7, cryptoCoin);
        }
 
        String fullCoinName = entity.getFullCoinName();
        if (fullCoinName != null) {
            stmt.bindString(8, fullCoinName);
        }
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(9, coinType);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Cryptocurrency entity) {
        stmt.clearBindings();
 
        String coinunique = entity.getCoinunique();
        if (coinunique != null) {
            stmt.bindString(1, coinunique);
        }
 
        String cryptoCurrency = entity.getCryptoCurrency();
        if (cryptoCurrency != null) {
            stmt.bindString(2, cryptoCurrency);
        }
 
        String cryptoCurrencyDesc = entity.getCryptoCurrencyDesc();
        if (cryptoCurrencyDesc != null) {
            stmt.bindString(3, cryptoCurrencyDesc);
        }
 
        String listlogoUrl = entity.getListlogoUrl();
        if (listlogoUrl != null) {
            stmt.bindString(4, listlogoUrl);
        }
 
        String cryptoName = entity.getCryptoName();
        if (cryptoName != null) {
            stmt.bindString(5, cryptoName);
        }
 
        String cryptoProtocol = entity.getCryptoProtocol();
        if (cryptoProtocol != null) {
            stmt.bindString(6, cryptoProtocol);
        }
 
        String cryptoCoin = entity.getCryptoCoin();
        if (cryptoCoin != null) {
            stmt.bindString(7, cryptoCoin);
        }
 
        String fullCoinName = entity.getFullCoinName();
        if (fullCoinName != null) {
            stmt.bindString(8, fullCoinName);
        }
 
        String coinType = entity.getCoinType();
        if (coinType != null) {
            stmt.bindString(9, coinType);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Cryptocurrency readEntity(Cursor cursor, int offset) {
        Cryptocurrency entity = new Cryptocurrency( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // coinunique
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // cryptoCurrency
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // cryptoCurrencyDesc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // listlogoUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // cryptoName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // cryptoProtocol
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cryptoCoin
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fullCoinName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // coinType
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Cryptocurrency entity, int offset) {
        entity.setCoinunique(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCryptoCurrency(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCryptoCurrencyDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setListlogoUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCryptoName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCryptoProtocol(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCryptoCoin(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFullCoinName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCoinType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Cryptocurrency entity, long rowId) {
        return entity.getCoinunique();
    }
    
    @Override
    public String getKey(Cryptocurrency entity) {
        if(entity != null) {
            return entity.getCoinunique();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Cryptocurrency entity) {
        return entity.getCoinunique() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
