package com.achpay.wallet.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.achpay.wallet.database.dbmodel.RecentOrder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RECENT_ORDER".
*/
public class RecentOrderDao extends AbstractDao<RecentOrder, String> {

    public static final String TABLENAME = "RECENT_ORDER";

    /**
     * Properties of entity RecentOrder.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrderId = new Property(0, String.class, "orderId", true, "ORDER_ID");
        public final static Property OrderTime = new Property(1, String.class, "orderTime", false, "ORDER_TIME");
        public final static Property OrderStatus = new Property(2, String.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property OrderDetail = new Property(3, String.class, "orderDetail", false, "ORDER_DETAIL");
        public final static Property IsRead = new Property(4, boolean.class, "isRead", false, "IS_READ");
        public final static Property IsDialogShown = new Property(5, boolean.class, "isDialogShown", false, "IS_DIALOG_SHOWN");
        public final static Property IsPrinted = new Property(6, boolean.class, "isPrinted", false, "IS_PRINTED");
    }


    public RecentOrderDao(DaoConfig config) {
        super(config);
    }
    
    public RecentOrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RECENT_ORDER\" (" + //
                "\"ORDER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: orderId
                "\"ORDER_TIME\" TEXT," + // 1: orderTime
                "\"ORDER_STATUS\" TEXT," + // 2: orderStatus
                "\"ORDER_DETAIL\" TEXT," + // 3: orderDetail
                "\"IS_READ\" INTEGER NOT NULL ," + // 4: isRead
                "\"IS_DIALOG_SHOWN\" INTEGER NOT NULL ," + // 5: isDialogShown
                "\"IS_PRINTED\" INTEGER NOT NULL );"); // 6: isPrinted
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RECENT_ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, RecentOrder entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
 
        String orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindString(2, orderTime);
        }
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(3, orderStatus);
        }
 
        String orderDetail = entity.getOrderDetail();
        if (orderDetail != null) {
            stmt.bindString(4, orderDetail);
        }
        stmt.bindLong(5, entity.getIsRead() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsDialogShown() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsPrinted() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, RecentOrder entity) {
        stmt.clearBindings();
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(1, orderId);
        }
 
        String orderTime = entity.getOrderTime();
        if (orderTime != null) {
            stmt.bindString(2, orderTime);
        }
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(3, orderStatus);
        }
 
        String orderDetail = entity.getOrderDetail();
        if (orderDetail != null) {
            stmt.bindString(4, orderDetail);
        }
        stmt.bindLong(5, entity.getIsRead() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsDialogShown() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsPrinted() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public RecentOrder readEntity(Cursor cursor, int offset) {
        RecentOrder entity = new RecentOrder( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // orderId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // orderTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderStatus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderDetail
            cursor.getShort(offset + 4) != 0, // isRead
            cursor.getShort(offset + 5) != 0, // isDialogShown
            cursor.getShort(offset + 6) != 0 // isPrinted
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, RecentOrder entity, int offset) {
        entity.setOrderId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrderTime(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderStatus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderDetail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsRead(cursor.getShort(offset + 4) != 0);
        entity.setIsDialogShown(cursor.getShort(offset + 5) != 0);
        entity.setIsPrinted(cursor.getShort(offset + 6) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(RecentOrder entity, long rowId) {
        return entity.getOrderId();
    }
    
    @Override
    public String getKey(RecentOrder entity) {
        if(entity != null) {
            return entity.getOrderId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(RecentOrder entity) {
        return entity.getOrderId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
